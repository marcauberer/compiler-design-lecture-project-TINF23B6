Compiling with own parser...
Token(type=TOK_TYPE_DOUBLE, text=double, codeLoc=L2C1)
Token(type=TOK_IDENTIFIER, text=getDbl, codeLoc=L2C8)
Token(type=TOK_COLON, text=:, codeLoc=L2C15)
Token(type=TOK_ASSIGN, text==, codeLoc=L2C16)
Token(type=TOK_LPAREN, text=(, codeLoc=L2C18)
Token(type=TOK_TYPE_DOUBLE, text=double, codeLoc=L2C19)
Token(type=TOK_IDENTIFIER, text=x, codeLoc=L2C26)
Token(type=TOK_RPAREN, text=), codeLoc=L2C27)
Token(type=TOK_LBRACE, text={, codeLoc=L2C29)
Token(type=TOK_RET, text=ret, codeLoc=L3C5)
Token(type=TOK_DOUBLE_LIT, text=4.567, codeLoc=L3C9)
Token(type=TOK_PLUS, text=+, codeLoc=L3C15)
Token(type=TOK_IDENTIFIER, text=x, codeLoc=L3C17)
Token(type=TOK_SEMICOLON, text=;, codeLoc=L3C18)
Token(type=TOK_RBRACE, text=}, codeLoc=L4C1)
Token(type=TOK_TYPE_INT, text=int, codeLoc=L6C1)
Token(type=TOK_IDENTIFIER, text=main, codeLoc=L6C5)
Token(type=TOK_COLON, text=:, codeLoc=L6C10)
Token(type=TOK_ASSIGN, text==, codeLoc=L6C11)
Token(type=TOK_LPAREN, text=(, codeLoc=L6C13)
Token(type=TOK_RPAREN, text=), codeLoc=L6C14)
Token(type=TOK_LBRACE, text={, codeLoc=L6C16)
Token(type=TOK_TYPE_INT, text=int, codeLoc=L7C5)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L7C9)
Token(type=TOK_ASSIGN, text==, codeLoc=L7C11)
Token(type=TOK_INT_LIT, text=3, codeLoc=L7C13)
Token(type=TOK_SEMICOLON, text=;, codeLoc=L7C14)
Token(type=TOK_WHILE, text=while, codeLoc=L10C5)
Token(type=TOK_LPAREN, text=(, codeLoc=L10C11)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L10C12)
Token(type=TOK_EQUAL, text===, codeLoc=L10C14)
Token(type=TOK_INT_LIT, text=3, codeLoc=L10C17)
Token(type=TOK_RPAREN, text=), codeLoc=L10C18)
Token(type=TOK_LBRACE, text={, codeLoc=L10C20)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L11C9)
Token(type=TOK_ASSIGN, text==, codeLoc=L11C11)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L11C13)
Token(type=TOK_MINUS, text=-, codeLoc=L11C15)
Token(type=TOK_INT_LIT, text=1, codeLoc=L11C17)
Token(type=TOK_SEMICOLON, text=;, codeLoc=L11C18)
Token(type=TOK_RBRACE, text=}, codeLoc=L12C5)
Token(type=TOK_DO, text=do, codeLoc=L15C5)
Token(type=TOK_LBRACE, text={, codeLoc=L15C8)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L16C9)
Token(type=TOK_ASSIGN, text==, codeLoc=L16C11)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L16C13)
Token(type=TOK_MUL, text=*, codeLoc=L16C15)
Token(type=TOK_INT_LIT, text=2, codeLoc=L16C17)
Token(type=TOK_SEMICOLON, text=;, codeLoc=L16C18)
Token(type=TOK_RBRACE, text=}, codeLoc=L17C5)
Token(type=TOK_WHILE, text=while, codeLoc=L17C7)
Token(type=TOK_LPAREN, text=(, codeLoc=L17C13)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L17C14)
Token(type=TOK_NOT_EQUAL, text=!=, codeLoc=L17C16)
Token(type=TOK_INT_LIT, text=8, codeLoc=L17C19)
Token(type=TOK_RPAREN, text=), codeLoc=L17C20)
Token(type=TOK_SEMICOLON, text=;, codeLoc=L17C21)
Token(type=TOK_FOR, text=for, codeLoc=L20C5)
Token(type=TOK_LPAREN, text=(, codeLoc=L20C9)
Token(type=TOK_TYPE_INT, text=int, codeLoc=L20C10)
Token(type=TOK_IDENTIFIER, text=j, codeLoc=L20C14)
Token(type=TOK_ASSIGN, text==, codeLoc=L20C16)
Token(type=TOK_INT_LIT, text=0, codeLoc=L20C18)
Token(type=TOK_SEMICOLON, text=;, codeLoc=L20C19)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L20C21)
Token(type=TOK_NOT_EQUAL, text=!=, codeLoc=L20C23)
Token(type=TOK_INT_LIT, text=10, codeLoc=L20C26)
Token(type=TOK_SEMICOLON, text=;, codeLoc=L20C28)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L20C30)
Token(type=TOK_ASSIGN, text==, codeLoc=L20C32)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L20C34)
Token(type=TOK_PLUS, text=+, codeLoc=L20C36)
Token(type=TOK_INT_LIT, text=1, codeLoc=L20C38)
Token(type=TOK_RPAREN, text=), codeLoc=L20C39)
Token(type=TOK_LBRACE, text={, codeLoc=L20C41)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L21C9)
Token(type=TOK_ASSIGN, text==, codeLoc=L21C11)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L21C13)
Token(type=TOK_PLUS, text=+, codeLoc=L21C15)
Token(type=TOK_INT_LIT, text=1, codeLoc=L21C17)
Token(type=TOK_SEMICOLON, text=;, codeLoc=L21C18)
Token(type=TOK_RBRACE, text=}, codeLoc=L22C5)
Token(type=TOK_SWITCH, text=switch, codeLoc=L25C5)
Token(type=TOK_LPAREN, text=(, codeLoc=L25C12)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L25C13)
Token(type=TOK_RPAREN, text=), codeLoc=L25C14)
Token(type=TOK_LBRACE, text={, codeLoc=L25C16)
Token(type=TOK_CASE, text=case, codeLoc=L26C9)
Token(type=TOK_INT_LIT, text=1, codeLoc=L26C14)
Token(type=TOK_COLON, text=:, codeLoc=L26C15)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L27C13)
Token(type=TOK_ASSIGN, text==, codeLoc=L27C15)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L27C17)
Token(type=TOK_PLUS, text=+, codeLoc=L27C19)
Token(type=TOK_INT_LIT, text=2, codeLoc=L27C21)
Token(type=TOK_SEMICOLON, text=;, codeLoc=L27C22)
Token(type=TOK_CASE, text=case, codeLoc=L28C9)
Token(type=TOK_INT_LIT, text=2, codeLoc=L28C14)
Token(type=TOK_COLON, text=:, codeLoc=L28C15)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L29C13)
Token(type=TOK_ASSIGN, text==, codeLoc=L29C15)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L29C17)
Token(type=TOK_DIV, text=/, codeLoc=L29C19)
Token(type=TOK_INT_LIT, text=2, codeLoc=L29C21)
Token(type=TOK_SEMICOLON, text=;, codeLoc=L29C22)
Token(type=TOK_DEFAULT, text=default, codeLoc=L30C9)
Token(type=TOK_COLON, text=:, codeLoc=L30C16)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L31C13)
Token(type=TOK_ASSIGN, text==, codeLoc=L31C15)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L31C17)
Token(type=TOK_MINUS, text=-, codeLoc=L31C19)
Token(type=TOK_INT_LIT, text=3, codeLoc=L31C21)
Token(type=TOK_SEMICOLON, text=;, codeLoc=L31C22)
Token(type=TOK_RBRACE, text=}, codeLoc=L32C5)
Token(type=TOK_LBRACE, text={, codeLoc=L35C5)
Token(type=TOK_TYPE_INT, text=int, codeLoc=L36C9)
Token(type=TOK_IDENTIFIER, text=j, codeLoc=L36C13)
Token(type=TOK_ASSIGN, text==, codeLoc=L36C15)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L36C17)
Token(type=TOK_PLUS, text=+, codeLoc=L36C19)
Token(type=TOK_INT_LIT, text=2, codeLoc=L36C21)
Token(type=TOK_SEMICOLON, text=;, codeLoc=L36C22)
Token(type=TOK_IDENTIFIER, text=i, codeLoc=L37C9)
Token(type=TOK_ASSIGN, text==, codeLoc=L37C11)
Token(type=TOK_IDENTIFIER, text=j, codeLoc=L37C13)
Token(type=TOK_SEMICOLON, text=;, codeLoc=L37C14)
Token(type=TOK_RBRACE, text=}, codeLoc=L38C5)
Token(type=TOK_TYPE_DOUBLE, text=double, codeLoc=L41C5)
Token(type=TOK_IDENTIFIER, text=d, codeLoc=L41C12)
Token(type=TOK_ASSIGN, text==, codeLoc=L41C14)
Token(type=TOK_CALL, text=call, codeLoc=L41C16)
Token(type=TOK_IDENTIFIER, text=getDbl, codeLoc=L41C21)
Token(type=TOK_LPAREN, text=(, codeLoc=L41C27)
Token(type=TOK_DOUBLE_LIT, text=5.42, codeLoc=L41C28)
Token(type=TOK_RPAREN, text=), codeLoc=L41C32)
Token(type=TOK_SEMICOLON, text=;, codeLoc=L41C33)
Token(type=TOK_PRINT, text=print, codeLoc=L42C5)
Token(type=TOK_LPAREN, text=(, codeLoc=L42C10)
Token(type=TOK_IDENTIFIER, text=d, codeLoc=L42C11)
Token(type=TOK_RPAREN, text=), codeLoc=L42C12)
Token(type=TOK_SEMICOLON, text=;, codeLoc=L42C13)
Token(type=TOK_RET, text=ret, codeLoc=L44C5)
Token(type=TOK_INT_LIT, text=0, codeLoc=L44C9)
Token(type=TOK_SEMICOLON, text=;, codeLoc=L44C10)
Token(type=TOK_RBRACE, text=}, codeLoc=L45C1)
Compilation successful!